LLK_LBFGSB <- matrix(0,num_interval,num_intervaldim+1)
LLK_maxLik <- matrix(0,num_interval,num_intervaldim*4+1)
for (i in 1:num_interval){
# i<-1
param_init <- matrix_interval[i,]
##minimization of -LogLikelihood
param_optimal_BFGS <- optim(
par = param_init,
fn = LogLikelihood2,method = "BFGS",
control = list(maxit = 10000, reltol = 1e-12),
dataset=dataset,count=count,Nu = Nu,Nei=Nei,Nef=Nef)
param_optimal_LBFGSB <- optim(
par = param_init,
fn = LogLikelihood2,method = "L-BFGS-B",
lower = c(-7,0,-7, 0,0,0), upper = c(10,10,10,10,1,1),control = list(maxit = 10000, pgtol = 1e-12),
dataset=dataset,count=count,Nu = Nu,Nei=Nei,Nef=Nef)
param_optimal_maxLik <- maxLik(
logLik = function(parameters)
{-LogLikelihood2(parameters,dataset=dataset,count=count,Nu = Nu,Nei=Nei,Nef=Nef)},
start = param_init)
param_optimal_BFGS_par <- param_optimal_BFGS$par
param_optimal_LBFGSB_par <- param_optimal_LBFGSB$par
param_optimal_maxLik_class <- summary(param_optimal_maxLik)
LLK_BFGS[i,1:num_intervaldim] <- param_optimal_BFGS_par
LLK_LBFGSB[i,1:num_intervaldim] <- param_optimal_LBFGSB_par
# Estimate
LLK_maxLik[i,1:num_intervaldim] <- t(param_optimal_maxLik_class[["estimate"]][,1])
# STD
LLK_maxLik[i,(1+num_intervaldim):(2*num_intervaldim)] <- t(param_optimal_maxLik_class[["estimate"]][,2])
# t-score
LLK_maxLik[i,(1+2*num_intervaldim):(3*num_intervaldim)] <- t(param_optimal_maxLik_class[["estimate"]][,3])
# probability
LLK_maxLik[i,(1+3*num_intervaldim):(4*num_intervaldim)] <- t(param_optimal_maxLik_class[["estimate"]][,4])
LLK_BFGS[i,num_intervaldim+1] <- LogLikelihood2(param_optimal_BFGS_par,dataset=dataset,count=count,Nu = Nu,Nei=Nei,Nef=Nef)
LLK_LBFGSB[i,num_intervaldim+1] <- LogLikelihood2(param_optimal_LBFGSB_par,dataset=dataset,count=count,Nu = Nu,Nei=Nei,Nef=Nef)
LLK_maxLik[i,4*num_intervaldim+1] <- LogLikelihood2(t(param_optimal_maxLik_class[["estimate"]][,1]),dataset=dataset,count=count,Nu = Nu,Nei=Nei,Nef=Nef)
progress <- i/num_interval*100
print(paste0("progress is currently ", progress , "% and country is ", name_country[count]," ranking ",count))
}
assign(paste0("LLK_BFGS_",name_country[count]),LLK_BFGS)
assign(paste0("LLK_LBFGSB_",name_country[count]),LLK_LBFGSB)
assign(paste0("LLK_maxLik_",name_country[count]),LLK_maxLik)
##
# temp_diff = 10
#
# while (temp_diff>1){
#   temp_index <- which.max(LLK[,7])
#   temp_param <- LLK[temp_index,1:num_intervaldim]
#
#   temp_FOC_Lambda <- lambda(mu_i = temp_param[1],sigma_i = temp_param[2],mu_f = temp_param[3],sigma_f = temp_param[4],dataset=dataset,count=count,Nu = Nu,Nei=Nei,Nef=Nef)
#   temp_FOC_Eta  <- eta(lambda = temp_param[5],mu_i = temp_param[1],sigma_i = temp_param[2],mu_f = temp_param[3],sigma_f = temp_param[4],dataset=dataset,count=count,Nu = Nu,Nei=Nei,Nef=Nef)
#   temp_FOC_Eta2   <- eta2(lambda = temp_param[5],mu_i = temp_param[1],sigma_i = temp_param[2],mu_f = temp_param[3],sigma_f = temp_param[4],dataset=dataset,count=count,Nu = Nu,Nei=Nei,Nef=Nef)
#   temp_FOC_Ratio <- ratioGandN(mu_i = temp_param[1],sigma_i = temp_param[2],mu_f = temp_param[3],sigma_f = temp_param[4],dataset=dataset,count=count,Nu = Nu,Nei=Nei,Nef=Nef)
#
#   temp_diff <- max(abs(temp_FOC_Lambda/temp_param[5]-1),abs(temp_FOC_Eta/temp_param[6]-1),abs(temp_FOC_Ratio-1))
#   if (temp_diff>1){
#     LLK <- LLK[-temp_index,]
#   }
# }
# FOC_Lambda[count] <- lambda(mu_i = temp_param[1],sigma_i = temp_param[2],mu_f = temp_param[3],sigma_f = temp_param[4],dataset=dataset,count=count,Nu = Nu,Nei=Nei,Nef=Nef)
# FOC_Eta[count]  <- eta(lambda = temp_param[5],mu_i = temp_param[1],sigma_i = temp_param[2],mu_f = temp_param[3],sigma_f = temp_param[4],dataset=dataset,count=count,Nu = Nu,Nei=Nei,Nef=Nef)
# FOC_Eta2[count]   <- eta2(lambda = temp_param[5],mu_i = temp_param[1],sigma_i = temp_param[2],mu_f = temp_param[3],sigma_f = temp_param[4],dataset=dataset,count=count,Nu = Nu,Nei=Nei,Nef=Nef)
# FOC_Ratio[count] <- ratioGandN(mu_i = temp_param[1],sigma_i = temp_param[2],mu_f = temp_param[3],sigma_f = temp_param[4],dataset=dataset,count=count,Nu = Nu,Nei=Nei,Nef=Nef)
#
## Get the estimate of b
# sample_G_i <- rlnorm(n = 100000, meanlog = temp_param[1], sdlog = temp_param[2])
# conditional_mean_G_i <- mean(sample_G_i[sample_G_i > w_star[count]])
#
# sample_G_f <- rlnorm(n = 100000, meanlog = temp_param[3], sdlog = temp_param[4])
# conditional_mean_G_f <- mean(sample_G_f[sample_G_f > w_star[count]])
#
# # Now compute
# b[count] <- w_star[count] - (temp_param[5]/(0.05 + temp_param[6]))*(
#   conditional_mean_G_i - w_star[count]*G_tilde(mu = temp_param[1], sigma = temp_param[2], dataset = dataset) +
#     conditional_mean_G_f - w_star[count]*G_tilde(mu = temp_param[3], sigma = temp_param[4], dataset = dataset))
}
View(LLK_maxLik_argentina)
View(LLK_maxLik_chile)
View(LLK_maxLik_mexico)
View(LLK_maxLik_colombia)
View(LLK_maxLik_chile)
ncol(LLK_BFGS)
source("FunctionLib2.R")
FOCdiff(LLK_BFGS)
FOCdiff(LLK_LBFGSB)
FOCdiff(LLK_maxLik)
View(LLK_BFGS)
View(LLK_LBFGSB)
View(LLK_maxLik)
rho <- 0.05
temp_index <- which.min(LLK_maxLik[,ncol(LLK_maxLik)])
temp_param <- LLK_maxLik[temp_index,1:num_intervaldim]
FOC_Lambda[count] <- lambda(mu_i = temp_param[1],sigma_i = temp_param[2],mu_f = temp_param[3],sigma_f = temp_param[4],dataset=dataset,count=count,Nu = Nu,Nei=Nei,Nef=Nef)
FOC_Eta[count]  <- eta(lambda = temp_param[5],mu_i = temp_param[1],sigma_i = temp_param[2],mu_f = temp_param[3],sigma_f = temp_param[4],dataset=dataset,count=count,Nu = Nu,Nei=Nei,Nef=Nef)
FOC_Eta2[count]   <- eta2(lambda = temp_param[5],mu_i = temp_param[1],sigma_i = temp_param[2],mu_f = temp_param[3],sigma_f = temp_param[4],dataset=dataset,count=count,Nu = Nu,Nei=Nei,Nef=Nef)
FOC_Ratio[count] <- ratioGandN(mu_i = temp_param[1],sigma_i = temp_param[2],mu_f = temp_param[3],sigma_f = temp_param[4],dataset=dataset,count=count,Nu = Nu,Nei=Nei,Nef=Nef)
sample_wage_Gi <- rlnorm(n = 100000, meanlog = temp_param[1], sdlog = temp_param[2])
wageHwstar_Gi <- mean(sample_wage_Gi[sample_wage_Gi > w_star[count]])
sample_wage_Gf <- rlnorm(n = 100000, meanlog = temp_param[3], sdlog = temp_param[4])
wageHwstar_Gf <- mean(sample_wage_Gf[sample_wage_Gf > w_star[count]])
# Now compute
b[count] <- w_star[count] - (temp_param[5]/(rho + temp_param[6]))*(
wageHwstar_Gi - w_star[count]*G_tilde(mu = temp_param[1], sigma = temp_param[2], dataset = dataset) +
wageHwstar_Gf - w_star[count]*G_tilde(mu = temp_param[3], sigma = temp_param[4], dataset = dataset))
temp_std   <- LLK_maxLik[temp_index,(1+num_intervaldim):(2*num_intervaldim)]
paste0("(",FOC_Eta2,")")
FOC_Eta2 <- rep(0,max(data$country))
table_latex <- data.table(matrix(0,12,4))
table_latex <- table(matrix(0,12,4))
table_latex <- as.table(matrix(0,12,4))
table_latex <- matrix(0,12,4)
colnames(table_latex) <- name_country
rownames(table_latex) <- c('\mu_i',' ','\sigma_i')
rownames(table_latex) <- c('\Hmu_i',' ','\sigma_i')
rownames(table_latex) <- c("mu_i")
table_latex <- matrix(0,1,4)
colnames(table_latex) <- name_country
rownames(table_latex) <- c("mu_i")
table_latex <- as.table()
table_latex <- as.table(table_latex)
table_latex
rownames(table_latex) <- c("\mu_i")
rownames(table_latex) <- c("\\mu_i")
table_latex <- as.table(table_latex)
table_latex
xtable(table_latex)
library(xtable)
xtable(table_latex)
rownames(table_latex) <- c("\mu_i")
rownames(table_latex) <- c("mu_i")
table_latex <- as.table(table_latex)
rownames(table_latex) <- c("mu_i","","sigma_i","","mu_f","","sigma_f","","lambda","eta")
table_latex <- matrix(0,10,4)
colnames(table_latex) <- name_country
rownames(table_latex) <- c("mu_i","","sigma_i","","mu_f","","sigma_f","","lambda","eta")
table_latex <- as.table(table_latex)
table_latex[1,1]
for (t in 1:4){
table_latex[2*t-1,count] <- temp_param[t]
table_latex[2*t,count] <- temp_std[t]
}
for (t in 9:10){
table_latex[t,count] <- temp_param[t-4]
}
table_latex
for (t in 1:4){
table_latex[2*t-1,count] <- temp_param[t]
table_latex[2*t,count] <- paste0("(",temp_std[t],")")
}
for (t in 9:10){
table_latex[t,count] <- temp_param[t-4]
}
table_latex
table_latex <- matrix(0,12,4)
colnames(table_latex) <- name_country
rownames(table_latex) <- c("mu_i","","sigma_i","","mu_f","","sigma_f","","lambda","eta","b","w^*")
table_latex <- as.table(table_latex)
for (t in 1:4){
table_latex[2*t-1,count] <- temp_param[t]
table_latex[2*t,count] <- paste0("(",temp_std[t],")")
}
for (t in 9:10){
table_latex[t,count] <- temp_param[t-4]
}
table_latex[11,count] <- b[count]
table_latex[12,count] <- w_star[count]
table_latex
table_latex <- matrix(0,14,4)
colnames(table_latex) <- name_country
rownames(table_latex) <- c("mu_i","","sigma_i","","mu_f","","sigma_f","","lambda","","eta","","b","w^*")
table_latex <- as.table(table_latex)
for (t in 1:num_intervaldim){
table_latex[2*t-1,count] <- temp_param[t]
table_latex[2*t,count] <- paste0("(",temp_std[t],")")
}
table_latex[13,count] <- b[count]
table_latex[14,count] <- w_star[count]
table_latex
for (t in 1:num_intervaldim){
table_latex[2*t-1,count] <- temp_param[t]
if (temp_prb[t]<0.01){
table_latex[2*t,count] <- paste0("(",temp_std[t],")^{***}")
}else if (temp_prb[t]<0.05){
table_latex[2*t,count] <- paste0("(",temp_std[t],")^{**}")
}else if (temp_prb[t]<0.1){
table_latex[2*t,count] <- paste0("(",temp_std[t],")^{*}")
}else{
table_latex[2*t,count] <- paste0("(",temp_std[t],")")
}
}
temp_prb   <- LLK_maxLik[temp_index,(1+3*num_intervaldim):(4*num_intervaldim)]
for (t in 1:num_intervaldim){
table_latex[2*t-1,count] <- temp_param[t]
if (temp_prb[t]<0.01){
table_latex[2*t,count] <- paste0("(",temp_std[t],")^{***}")
}else if (temp_prb[t]<0.05){
table_latex[2*t,count] <- paste0("(",temp_std[t],")^{**}")
}else if (temp_prb[t]<0.1){
table_latex[2*t,count] <- paste0("(",temp_std[t],")^{*}")
}else{
table_latex[2*t,count] <- paste0("(",temp_std[t],")")
}
}
table_latex[13,count] <- b[count]
table_latex[14,count] <- w_star[count]
table_latex
xtable(table_latex)
xtable(table_latex,type="latex",file = "Table_Coefficient.tex")
xtable(table_latex,type="latex",file = "Table_Coefficient.tex")
print(xtable(table_latex, type = "latex"), file = "Table_Coefficient.tex")
print(xtable(Table_Coefficient, type = "latex"), file = "Table_Coefficient.tex")
Table_Population <- matrix(0,7,4)
colnames(Table_Population) <- name_country
rownames(Table_Population) <- c("N_u","Percentage","N_{e_i}","Percentage","N_{e_f}","Percentage","N")
Table_Population <- as.table(Table_Population)
Table_Population
Table_Population[1,count] <- Nu[count]
Table_Population[3,count] <- Nei[count]
Table_Population[5,count] <- Nef[count]
Table_Population[7,count] <- N[count]
Table_Population[2,count] <- Nu[count]/N[count]
Table_Population[4,count] <- Nei[count]/N[count]
Table_Population[6,count] <- Nef[count]/N[count]
Table_Population
Table_Population[1,count] <- paste0("%d",Nu[count])
Table_Population
Table_Population[1,count] <- paste0(Nu[count])
Table_Population
Table_Population[1,count] <- paste0(Nu[count])
Table_Population[3,count] <- Nei[count]
Table_Population[5,count] <- Nef[count]
Table_Population[7,count] <- N[count]
Table_Population[2,count] <- Nu[count]/N[count]*100
Table_Population[4,count] <- Nei[count]/N[count]*100
Table_Population[6,count] <- Nef[count]/N[count]*100
Table_Population
Table_Population[2,count] <- paste0(sprintf("%.2f",Nu[count]/N[count]*100))
Table_Population
Table_Population[4,count] <- paste0(sprintf("%.2f",Nei[count]/N[count]*100))
Table_Population[6,count] <- paste0(sprintf("%.2f",Nef[count]/N[count]*100))
Table_Population
Table_Coefficient[2*t,count] <- paste0("(",sprintf(".2f%",temp_std[t]),")")
for (t in 1:num_intervaldim){
Table_Coefficient[2*t-1,count] <- sprintf("%.2f",temp_param[t])
if (temp_prb[t]<0.01){
Table_Coefficient[2*t,count] <- paste0("(",sprintf("%.2f",temp_std[t]),")^{***}")
}else if (temp_prb[t]<0.05){
Table_Coefficient[2*t,count] <- paste0("(",sprintf("%.2f",temp_std[t]),")^{**}")
}else if (temp_prb[t]<0.1){
Table_Coefficient[2*t,count] <- paste0("(",sprintf("%.2f",temp_std[t]),")^{*}")
}else{
Table_Coefficient[2*t,count] <- paste0("(",sprintf("%.2f",temp_std[t]),")")
}
}
Table_Coefficient <- matrix(0,14,4)
colnames(Table_Coefficient) <- name_country
rownames(Table_Coefficient) <- c("mu_i","","sigma_i","","mu_f","","sigma_f","","lambda","","eta","","b","w^*")
Table_Coefficient <- as.table(Table_Coefficient)
Table_Population <- matrix(0,7,4)
colnames(Table_Population) <- name_country
rownames(Table_Population) <- c("N_u","Percentage","N_{e_i}","Percentage","N_{e_f}","Percentage","N")
Table_Population <- as.table(Table_Population)
for (t in 1:num_intervaldim){
Table_Coefficient[2*t-1,count] <- sprintf("%.2f",temp_param[t])
if (temp_prb[t]<0.01){
Table_Coefficient[2*t,count] <- paste0("(",sprintf("%.2f",temp_std[t]),")^{***}")
}else if (temp_prb[t]<0.05){
Table_Coefficient[2*t,count] <- paste0("(",sprintf("%.2f",temp_std[t]),")^{**}")
}else if (temp_prb[t]<0.1){
Table_Coefficient[2*t,count] <- paste0("(",sprintf("%.2f",temp_std[t]),")^{*}")
}else{
Table_Coefficient[2*t,count] <- paste0("(",sprintf("%.2f",temp_std[t]),")")
}
}
Table_Coefficient[13,count] <- b[count]
Table_Coefficient[14,count] <- w_star[count]
Table_Population[1,count] <- paste0(Nu[count])
Table_Population[3,count] <- Nei[count]
Table_Population[5,count] <- Nef[count]
Table_Population[7,count] <- N[count]
Table_Population[2,count] <- paste0(sprintf("%.2f",Nu[count]/N[count]*100))
Table_Population[4,count] <- paste0(sprintf("%.2f",Nei[count]/N[count]*100))
Table_Population[6,count] <- paste0(sprintf("%.2f",Nef[count]/N[count]*100))
print(xtable(Table_Coefficient, type = "latex"), file = "Table_Coefficient.tex")
print(xtable(Table_Population, type = "latex"), file = "Table_Population.tex")
Table_Coefficient <- matrix(0,14,4)
colnames(Table_Coefficient) <- name_country
rownames(Table_Coefficient) <- c("mu_i","","sigma_i","","mu_f","","sigma_f","","lambda","","eta","","b","w^*")
Table_Coefficient <- as.table(Table_Coefficient)
Table_Population <- matrix(0,7,4)
colnames(Table_Population) <- name_country
rownames(Table_Population) <- c("N_u","Percentage","N_\{e_i\}","Percentage","N_{e_f}","Percentage","N")
Table_Population <- as.table(Table_Population)
for (t in 1:num_intervaldim){
Table_Coefficient[2*t-1,count] <- sprintf("%.2f",temp_param[t])
if (temp_prb[t]<0.01){
Table_Coefficient[2*t,count] <- paste0("(",sprintf("%.2f",temp_std[t]),")^{***}")
}else if (temp_prb[t]<0.05){
Table_Coefficient[2*t,count] <- paste0("(",sprintf("%.2f",temp_std[t]),")^{**}")
}else if (temp_prb[t]<0.1){
Table_Coefficient[2*t,count] <- paste0("(",sprintf("%.2f",temp_std[t]),")^{*}")
}else{
Table_Coefficient[2*t,count] <- paste0("(",sprintf("%.2f",temp_std[t]),")")
}
}
Table_Coefficient[13,count] <- b[count]
Table_Coefficient[14,count] <- w_star[count]
Table_Population[1,count] <- paste0(Nu[count])
Table_Population[3,count] <- Nei[count]
Table_Population[5,count] <- Nef[count]
Table_Population[7,count] <- N[count]
Table_Population[2,count] <- paste0(sprintf("%.2f",Nu[count]/N[count]*100))
Table_Population[4,count] <- paste0(sprintf("%.2f",Nei[count]/N[count]*100))
Table_Population[6,count] <- paste0(sprintf("%.2f",Nef[count]/N[count]*100))
Table_Coefficient <- matrix(0,14,4)
colnames(Table_Coefficient) <- name_country
rownames(Table_Coefficient) <- c("mu_i"," ","sigma_i"," ","mu_f"," ","sigma_f"," ","lambda"," ","eta"," ","b","w^*")
Table_Coefficient <- as.table(Table_Coefficient)
Table_Population <- matrix(0,7,4)
colnames(Table_Population) <- name_country
Table_Coefficient <- matrix(0,14,4)
colnames(Table_Coefficient) <- name_country
rownames(Table_Coefficient) <- c("mu_i"," ","sigma_i"," ","mu_f"," ","sigma_f"," ","lambda"," ","eta"," ","b","w^*")
Table_Coefficient <- as.table(Table_Coefficient)
Table_Population <- matrix(0,7,4)
colnames(Table_Population) <- name_country
rownames(Table_Population) <- c("N_u","Percentage","N_\{e_i\}","Percentage","N_{e_f}","Percentage","N")
Table_Population <- as.table(Table_Population)
for (t in 1:num_intervaldim){
Table_Coefficient[2*t-1,count] <- sprintf("%.2f",temp_param[t])
if (temp_prb[t]<0.01){
Table_Coefficient[2*t,count] <- paste0("(",sprintf("%.2f",temp_std[t]),")^{***}")
}else if (temp_prb[t]<0.05){
Table_Coefficient[2*t,count] <- paste0("(",sprintf("%.2f",temp_std[t]),")^{**}")
}else if (temp_prb[t]<0.1){
Table_Coefficient[2*t,count] <- paste0("(",sprintf("%.2f",temp_std[t]),")^{*}")
}else{
Table_Coefficient[2*t,count] <- paste0("(",sprintf("%.2f",temp_std[t]),")")
}
}
Table_Coefficient[13,count] <- b[count]
Table_Coefficient[14,count] <- w_star[count]
Table_Population[1,count] <- paste0(Nu[count])
Table_Population[3,count] <- Nei[count]
Table_Population[5,count] <- Nef[count]
Table_Population[7,count] <- N[count]
Table_Population[2,count] <- paste0(sprintf("%.2f",Nu[count]/N[count]*100))
Table_Population[4,count] <- paste0(sprintf("%.2f",Nei[count]/N[count]*100))
Table_Population[6,count] <- paste0(sprintf("%.2f",Nef[count]/N[count]*100))
Table_Coefficient
xtable(Table_Coefficient)
xtable(Table_Coefficient,auto = TRUE)
xtable(Table_Coefficient,auto = TRUE,booktabs = T)
print(xtable(Table_Coefficient, type = "latex"), file = "Table_Coefficient.tex",booktabs = T)
print(xtable(Table_Coefficient, type = "latex"), file = "Table_Coefficient.tex")
#############Environment Setting################
################################################
# Load packages
rm(list=ls())
library(tidyverse)
library(stats4)
library(maxLik)
library(alr4)
library(bbmle)
library(xtable)
setwd("C:/Users/\alienware/Desktop/Deeqa_EEE/Empirical methods for policy evaluation/Part 2/Takehome 2-20211227")
# setwd("C:/Users/33678/Desktop/Deeqa_EEE/Empirical methods for policy evaluation/Part 2/Takehome 2-20211227")
source("FunctionLib2.R")
################################################
################################################
################################################
#Import Data
chile <- read.delim(file = "chile.txt", sep = ",", header = FALSE, col.names = c("duration","wage","status"))
argentina <- read.delim(file = "argentina.txt", sep = ",", header = FALSE, col.names = c("duration","wage","status"))
colombia  <-read.delim(file = "colombia.txt", sep = ",", header = FALSE, col.names = c("duration","wage","status"))
mexico    <-read.delim(file = "mexico.txt", sep = ",", header = FALSE, col.names = c("duration","wage","status"))
#Combine Data
chile$country =1
argentina$country =2
colombia$country =3
mexico$country =4
data <- bind_rows(chile,argentina,colombia,mexico)
#Setting Parameters
rho <- 0.05
N <- rep(0,max(data$country))
Nu <- rep(0,max(data$country))
Nef <- rep(0,max(data$country))
Nei <- rep(0,max(data$country))
w_star <- rep(0,max(data$country))
FOC_Lambda <- rep(0,max(data$country))
FOC_Eta <- rep(0,max(data$country))
FOC_Eta2 <- rep(0,max(data$country))
FOC_Ratio <- rep(0,max(data$country))
b <-rep(0,max(data$country))
name_country <- c("chile","argentina","colombia","mexico")
Table_Coefficient <- matrix(0,14,4)
colnames(Table_Coefficient) <- name_country
rownames(Table_Coefficient) <- c("mu_i"," ","sigma_i"," ","mu_f"," ","sigma_f"," ","lambda"," ","eta"," ","b","w^*")
Table_Coefficient <- as.table(Table_Coefficient)
Table_Population <- matrix(0,7,4)
colnames(Table_Population) <- name_country
rownames(Table_Population) <- c("N_u","Percentage","N_\{e_i\}","Percentage","N_{e_f}","Percentage","N")
Table_Population <- as.table(Table_Population)
for (count in 1:4){
# count <- 1
dataset <- data %>% filter(country == count)
num_interval <- 100
Lb <- c(-5,0,-5,0,0,0)
Ub <- c(10,10,10,10,1,1)
num_intervaldim <- length(Lb)
matrix_interval <- matrix(0,num_interval,num_intervaldim)
for (i in 1:num_intervaldim){
matrix_interval[1:num_interval,i] <- runif(num_interval,Lb[i],Ub[i])
}
#Market Stock
N[count] <- nrow(dataset)
Nu[count] <- nrow(dataset[dataset$status == 1,])
Nef[count] <- nrow(dataset[dataset$status == 2,])
Nei[count] <- nrow(dataset[dataset$status == 3,])
################################################
# Wage Estimate
w_star[count] = min(dataset$wage[dataset$status != 1])
# Parameter Estimate
assign(paste0("LLK_BFGS_",name_country[count]),matrix(0,num_interval,num_intervaldim+1))
assign(paste0("LLK_LBFGSB_",name_country[count]),matrix(0,num_interval,num_intervaldim+1))
assign(paste0("LLK_maxLik_",name_country[count]),matrix(0,num_interval,num_intervaldim*4+1))
LLK_BFGS <- matrix(0,num_interval,num_intervaldim+1)
LLK_LBFGSB <- matrix(0,num_interval,num_intervaldim+1)
LLK_maxLik <- matrix(0,num_interval,num_intervaldim*4+1)
for (i in 1:num_interval){
# i<-1
param_init <- matrix_interval[i,]
##minimization of -LogLikelihood
param_optimal_BFGS <- optim(
par = param_init,
fn = LogLikelihood2,method = "BFGS",
control = list(maxit = 10000, reltol = 1e-12),
dataset=dataset,count=count,Nu = Nu,Nei=Nei,Nef=Nef)
param_optimal_LBFGSB <- optim(
par = param_init,
fn = LogLikelihood2,method = "L-BFGS-B",
lower = c(-7,0,-7, 0,0,0), upper = c(10,10,10,10,1,1),control = list(maxit = 10000, pgtol = 1e-12),
dataset=dataset,count=count,Nu = Nu,Nei=Nei,Nef=Nef)
param_optimal_maxLik <- maxLik(
logLik = function(parameters)
{-LogLikelihood2(parameters,dataset=dataset,count=count,Nu = Nu,Nei=Nei,Nef=Nef)},
start = param_init)
param_optimal_BFGS_par <- param_optimal_BFGS$par
param_optimal_LBFGSB_par <- param_optimal_LBFGSB$par
param_optimal_maxLik_class <- summary(param_optimal_maxLik)
LLK_BFGS[i,1:num_intervaldim] <- param_optimal_BFGS_par
LLK_LBFGSB[i,1:num_intervaldim] <- param_optimal_LBFGSB_par
# Estimate
LLK_maxLik[i,1:num_intervaldim] <- t(param_optimal_maxLik_class[["estimate"]][,1])
# STD
LLK_maxLik[i,(1+num_intervaldim):(2*num_intervaldim)] <- t(param_optimal_maxLik_class[["estimate"]][,2])
# t-score
LLK_maxLik[i,(1+2*num_intervaldim):(3*num_intervaldim)] <- t(param_optimal_maxLik_class[["estimate"]][,3])
# probability
LLK_maxLik[i,(1+3*num_intervaldim):(4*num_intervaldim)] <- t(param_optimal_maxLik_class[["estimate"]][,4])
LLK_BFGS[i,num_intervaldim+1] <- LogLikelihood2(param_optimal_BFGS_par,dataset=dataset,count=count,Nu = Nu,Nei=Nei,Nef=Nef)
LLK_LBFGSB[i,num_intervaldim+1] <- LogLikelihood2(param_optimal_LBFGSB_par,dataset=dataset,count=count,Nu = Nu,Nei=Nei,Nef=Nef)
LLK_maxLik[i,4*num_intervaldim+1] <- LogLikelihood2(t(param_optimal_maxLik_class[["estimate"]][,1]),dataset=dataset,count=count,Nu = Nu,Nei=Nei,Nef=Nef)
progress <- i/num_interval*100
print(paste0("progress is currently ", progress , "% and country is ", name_country[count]," ranking ",count))
}
assign(paste0("LLK_BFGS_",name_country[count]),LLK_BFGS)
assign(paste0("LLK_LBFGSB_",name_country[count]),LLK_LBFGSB)
assign(paste0("LLK_maxLik_",name_country[count]),LLK_maxLik)
temp_index <- which.min(LLK_maxLik[,ncol(LLK_maxLik)])
temp_param <- LLK_maxLik[temp_index,1:num_intervaldim]
temp_std   <- LLK_maxLik[temp_index,(1+num_intervaldim):(2*num_intervaldim)]
temp_prb   <- LLK_maxLik[temp_index,(1+3*num_intervaldim):(4*num_intervaldim)]
FOC_Lambda[count] <- lambda(mu_i = temp_param[1],sigma_i = temp_param[2],mu_f = temp_param[3],sigma_f = temp_param[4],dataset=dataset,count=count,Nu = Nu,Nei=Nei,Nef=Nef)
FOC_Eta[count]  <- eta(lambda = temp_param[5],mu_i = temp_param[1],sigma_i = temp_param[2],mu_f = temp_param[3],sigma_f = temp_param[4],dataset=dataset,count=count,Nu = Nu,Nei=Nei,Nef=Nef)
FOC_Eta2[count]   <- eta2(lambda = temp_param[5],mu_i = temp_param[1],sigma_i = temp_param[2],mu_f = temp_param[3],sigma_f = temp_param[4],dataset=dataset,count=count,Nu = Nu,Nei=Nei,Nef=Nef)
FOC_Ratio[count] <- ratioGandN(mu_i = temp_param[1],sigma_i = temp_param[2],mu_f = temp_param[3],sigma_f = temp_param[4],dataset=dataset,count=count,Nu = Nu,Nei=Nei,Nef=Nef)
## Estimate b
sample_wage_Gi <- rlnorm(n = 100000, meanlog = temp_param[1], sdlog = temp_param[2])
wageHwstar_Gi <- mean(sample_wage_Gi[sample_wage_Gi > w_star[count]])
sample_wage_Gf <- rlnorm(n = 100000, meanlog = temp_param[3], sdlog = temp_param[4])
wageHwstar_Gf <- mean(sample_wage_Gf[sample_wage_Gf > w_star[count]])
b[count] <- w_star[count] - (temp_param[5]/(rho + temp_param[6]))*(
wageHwstar_Gi - w_star[count]*G_tilde(mu = temp_param[1], sigma = temp_param[2], dataset = dataset) +
wageHwstar_Gf - w_star[count]*G_tilde(mu = temp_param[3], sigma = temp_param[4], dataset = dataset))
# table part
for (t in 1:num_intervaldim){
Table_Coefficient[2*t-1,count] <- sprintf("%.2f",temp_param[t])
if (temp_prb[t]<0.01){
Table_Coefficient[2*t,count] <- paste0("(",sprintf("%.2f",temp_std[t]),")^{***}")
}else if (temp_prb[t]<0.05){
Table_Coefficient[2*t,count] <- paste0("(",sprintf("%.2f",temp_std[t]),")^{**}")
}else if (temp_prb[t]<0.1){
Table_Coefficient[2*t,count] <- paste0("(",sprintf("%.2f",temp_std[t]),")^{*}")
}else{
Table_Coefficient[2*t,count] <- paste0("(",sprintf("%.2f",temp_std[t]),")")
}
}
Table_Coefficient[13,count] <- b[count]
Table_Coefficient[14,count] <- w_star[count]
Table_Population[1,count] <- paste0(Nu[count])
Table_Population[3,count] <- Nei[count]
Table_Population[5,count] <- Nef[count]
Table_Population[7,count] <- N[count]
Table_Population[2,count] <- paste0(sprintf("%.2f",Nu[count]/N[count]*100))
Table_Population[4,count] <- paste0(sprintf("%.2f",Nei[count]/N[count]*100))
Table_Population[6,count] <- paste0(sprintf("%.2f",Nef[count]/N[count]*100))
}
print(xtable(Table_Coefficient, type = "latex"), file = "Table_Coefficient.tex")
print(xtable(Table_Population, type = "latex"), file = "Table_Population.tex")
save(file = “Full.RData”)
save.image("test.RData")
